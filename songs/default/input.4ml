/*******************************************************************************
* TITLE      : 4ML Template
* COMPOSER   : 
* PROGRAMMER : You!
* DATE       : 
* NOTES      : A blank template ready for 4ML commands. Here's a quick
*              cheatsheet to get started (an 'X' indicates a required value):
*
*              CX           : Declare a channel
*              PX           : Declare a pattern
*              cX - gX      : Note values (X = duration)
*              rX           : Rest / silence (X = duration)
*              1,2,4,8,16,
*              32,64,128    : Possible note / rest durations
*              X.           : Dotted note (X plus an additional 1/2 X)
*              + or #       : Sharpen a note
*              o1-6         : Channel octave (1 lowest, 6 highest)
*              < or >       : Decrease, or increase, the current octave
*              v1-16        : Channel volume/velocity
*              [2-256       : Start X number of loops
*              ]            : End a loop
*              p1-256       : Call a pattern
*              t1-256       : Set the voice's tempo
*              @1-256       : Select an instrument
*              K -100 - 100 : Transpose material X semitones
*              s -100 - 100 : Setting panning (0 is centered)
*
*              Some quick tips:
*
*              -> The 4ML structure is flexible! You can label your channel /
*                 pattern material wherever you like in the file. See the demo
*                 song below for an example.
*
*              -> You can nest up to five loops - or four in a macro.
*                 e.g.: "[X[X[X[X[X ]]]]]"
*
*              -> Notes don't need multiple, identical durations.
*                 e.g.: "cX cX cX" could be written as "cX c c"
*
*              -> Careful when jumping to a macro, it won't remember your
*                 octave! Best practice is to declare an octave at the start of
*                 each macro, and when you return.
*                 e.g.: "@ oX" and "mX oX"
*
*              -> Save space whenever and wherever you can! Arpeggios can be
*                 condensed into loops and repeated passages should become
*                 patterns.
*
*              -> Channels will loop back to the beginning when they
*                 have completed reading their data.
*
*              -> Tempo commands can be placed in any channel, but only apply to
*                 that channel at that point. If you want to globally change
*                 tempi you must ensure they are triggered at the same point in
*                 each channel (yes, very stupid, I know).
*
*              I hope you have fun writing tiny music! If you have any questions
*              / suggestions / corrections contact me at: hello@protodome.com
*******************************************************************************/

; example garbage, have a look at the other songs
C1 t50 v8  o2 @3  c1^c^c^c^
C2 t50 v8  o3 @14 s40  g1^g^g^g^
C3 t50 v8  o4 @6  s-40 d1^d^d^d^
C4 t50 v8  o4 @14 s40  e1^e^e^e^
C5 t50 v8  o3 @6  s-40 b1^e^d^e^
C6 t50 v8  o6 @15 [64 d64^<g^e^c^> ]
C7 t50 v12 o3 @1 c1^c^c^c^
C8 t50 [4 v6f8v2e [3 v6ev2e ] ]

; weird stuff can happen on loop, so just stop everything
C1 p1
C2 p1
C3 p1
C4 p1
C5 p1
C6 p1
C7 p1
C8 p1

; silence channels
P1 [255 r1 ]